#https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
#https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions
# top-most EditorConfig file
root = true
# Code files
[*.cs]
indent_size = 4

######### C# code style settings

# When this rule is set to false, prefer explicit type over var to declare variables with built-in system types such as int.
csharp_style_var_for_built_in_types = false:error
# When this rule is set to false, prefer explicit type over var when the type is already mentioned on the right-hand side of a declaration expression. 
csharp_style_var_when_type_is_apparent = false:warning
# When this rule is set to false, prefer explicit type over var in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = false:warning

######### Expression-bodied members

# Prefer block bodies for methods
csharp_style_expression_bodied_methods = false
# Prefer block bodies for constructors
csharp_style_expression_bodied_constructors = false
# Prefer block bodies for operators
csharp_style_expression_bodied_operators = false
# Prefer block bodies for properties
csharp_style_expression_bodied_properties = false
# Prefer block bodies for indexers
csharp_style_expression_bodied_indexers = false
# Prefer block bodies for accessors
csharp_style_expression_bodied_accessors = false

####### Pattern Matching

####### Inlined variable declarations
# When this rule is set to false, prefer out variables to be declared before the method call. 
csharp_style_inlined_variable_declaration = false

####### Expression-level preferences
# When this rule is set to true, prefer default over default(T).
csharp_prefer_simple_default_expression = true
# When this rule is set to false, do not prefer deconstruction in variable declarations. 
csharp_style_deconstructed_variable_declaration = false
# When this rule is set to true, prefer local functions over anonymous functions.
# When this rule is set to false, prefer anonymous functions over local functions. 
csharp_style_pattern_local_over_anonymous_function = true

####### "Null" checking preferences
# When this rule is set to false, prefer to use throw statements instead of throw expressions. 
csharp_style_throw_expression = false
# When this rule is set to false, prefer to perform a null check before invoking a lambda expression, instead of using the conditional coalescing operator (?.). 
csharp_style_conditional_delegate_call = false

####### Code block preferences
# When this rule is set to true, prefer curly braces even for one line of code.
csharp_prefer_braces = true

####### Organize usings
# When this rule is set to true, sort System.* using directives alphabetically, and place them before other usings.
dotnet_sort_system_directives_first = true

####### C# formatting settings
# This rule concerns whether an open brace { should be placed on the same line as the preceding code, or on a new line. 
csharp_new_line_before_open_brace = all
# When this rule is set to true, place else statements on a new line.
csharp_new_line_before_else = true
# When this rule is set to true, place catch statements on a new line.
csharp_new_line_before_catch = true
# When this rule is set to true, require finally statements to be on a new line after the closing brace.
csharp_new_line_before_finally = true
# When this rule is set to false, require members of object initializers to be on the same line. 
csharp_new_line_before_members_in_object_initializers = false
# When this rule is set to false, require members of anonymous types to be on the same line. 
csharp_new_line_before_members_in_anonymous_types = false
# When this rule is set to false, require elements of query expression clauses to be on the same line
csharp_new_line_between_query_expression_clauses = false


####### Indentation options
# When this rule is set to true, indent switch case contents.
csharp_indent_case_contents = true
# When this rule is set to true, indent switch labels.
csharp_indent_switch_labels = true
# Labels are placed at the leftmost column
csharp_indent_labels= flush_left

####### Spacing Options
# When this rule is set to false, require no space between the cast and the value. 
csharp_space_after_cast = false
# When this rule is set to true, require a space after a keyword in a control flow statement such as a for loop.
csharp_space_after_keywords_in_control_flow_statements = true
# When this rule is set to false, do not place space characters after the opening parenthesis and before the closing parenthesis of a method declaration parameter list. 
csharp_space_between_method_declaration_parameter_list_parentheses = false
# When this rule is set to false, do not place space characters after the opening parenthesis and before the closing parenthesis of a method call. 
csharp_space_between_method_call_parameter_list_parentheses = false


######### .NET code style settings

# When this rule is set to false, prefer fields not to be prefaced with this.
dotnet_style_qualification_for_field = false:warning
# When this rule is set to false, prefer properties not to be prefaced with this.
dotnet_style_qualification_for_property = false:warning
# When this rule is set to false, prefer methods not to be prefaced with this.
dotnet_style_qualification_for_method = false:warning
# When this rule is set to false, prefer events not to be prefaced with this.
dotnet_style_qualification_for_event = false:warning
# When this rule is set to false, prefer the type name for local variables, 
# method parameters, and class members, instead of the language keyword. 
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
# When this rule is set to false, prefer the type name for member access expressions, instead of the language keyword. 
dotnet_style_predefined_type_for_member_access = true:warning

######### Modifier preferences

# Prefer accessibility modifiers to be declared except for public interface members. This will currently not differ 
# from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = for_non_interface_members
# When this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async

######### Expression-level preferences

# When this rule is set to false, prefer objects to not be initialized using object initializers. 
dotnet_style_object_initializer = true:warning
#When this rule is set to false, prefer collections to not be initialized using collection initializers.
dotnet_style_collection_initializer = true:warning
# When this rule is set to false, prefer ItemX properties to tuple names.
dotnet_style_explicit_tuple_names = true:warning
# When this rule is set to false, prefer ternary operator checking to null coalescing expressions.
dotnet_style_coalesce_expression = true:warning
# When this rule is set to false, prefer to use ternary null checking where possible. 
# When this rule is set to true, prefer to use null-conditional operator when possible.
dotnet_style_null_propagation = true:warning

